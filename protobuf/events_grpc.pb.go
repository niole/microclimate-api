// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeripheralMeasurementEventServiceClient is the client API for PeripheralMeasurementEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeripheralMeasurementEventServiceClient interface {
	SendEvent(ctx context.Context, in *MeasurementEvent, opts ...grpc.CallOption) (*Empty, error)
	FilterEvents(ctx context.Context, in *MeasurementEventFilterRequest, opts ...grpc.CallOption) (PeripheralMeasurementEventService_FilterEventsClient, error)
}

type peripheralMeasurementEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeripheralMeasurementEventServiceClient(cc grpc.ClientConnInterface) PeripheralMeasurementEventServiceClient {
	return &peripheralMeasurementEventServiceClient{cc}
}

func (c *peripheralMeasurementEventServiceClient) SendEvent(ctx context.Context, in *MeasurementEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PeripheralMeasurementEventService/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peripheralMeasurementEventServiceClient) FilterEvents(ctx context.Context, in *MeasurementEventFilterRequest, opts ...grpc.CallOption) (PeripheralMeasurementEventService_FilterEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeripheralMeasurementEventService_serviceDesc.Streams[0], "/api.PeripheralMeasurementEventService/FilterEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &peripheralMeasurementEventServiceFilterEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeripheralMeasurementEventService_FilterEventsClient interface {
	Recv() (*MeasurementEvent, error)
	grpc.ClientStream
}

type peripheralMeasurementEventServiceFilterEventsClient struct {
	grpc.ClientStream
}

func (x *peripheralMeasurementEventServiceFilterEventsClient) Recv() (*MeasurementEvent, error) {
	m := new(MeasurementEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeripheralMeasurementEventServiceServer is the server API for PeripheralMeasurementEventService service.
// All implementations must embed UnimplementedPeripheralMeasurementEventServiceServer
// for forward compatibility
type PeripheralMeasurementEventServiceServer interface {
	SendEvent(context.Context, *MeasurementEvent) (*Empty, error)
	FilterEvents(*MeasurementEventFilterRequest, PeripheralMeasurementEventService_FilterEventsServer) error
	mustEmbedUnimplementedPeripheralMeasurementEventServiceServer()
}

// UnimplementedPeripheralMeasurementEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeripheralMeasurementEventServiceServer struct {
}

func (UnimplementedPeripheralMeasurementEventServiceServer) SendEvent(context.Context, *MeasurementEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedPeripheralMeasurementEventServiceServer) FilterEvents(*MeasurementEventFilterRequest, PeripheralMeasurementEventService_FilterEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterEvents not implemented")
}
func (UnimplementedPeripheralMeasurementEventServiceServer) mustEmbedUnimplementedPeripheralMeasurementEventServiceServer() {
}

// UnsafePeripheralMeasurementEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeripheralMeasurementEventServiceServer will
// result in compilation errors.
type UnsafePeripheralMeasurementEventServiceServer interface {
	mustEmbedUnimplementedPeripheralMeasurementEventServiceServer()
}

func RegisterPeripheralMeasurementEventServiceServer(s *grpc.Server, srv PeripheralMeasurementEventServiceServer) {
	s.RegisterService(&_PeripheralMeasurementEventService_serviceDesc, srv)
}

func _PeripheralMeasurementEventService_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasurementEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeripheralMeasurementEventServiceServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PeripheralMeasurementEventService/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeripheralMeasurementEventServiceServer).SendEvent(ctx, req.(*MeasurementEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeripheralMeasurementEventService_FilterEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MeasurementEventFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeripheralMeasurementEventServiceServer).FilterEvents(m, &peripheralMeasurementEventServiceFilterEventsServer{stream})
}

type PeripheralMeasurementEventService_FilterEventsServer interface {
	Send(*MeasurementEvent) error
	grpc.ServerStream
}

type peripheralMeasurementEventServiceFilterEventsServer struct {
	grpc.ServerStream
}

func (x *peripheralMeasurementEventServiceFilterEventsServer) Send(m *MeasurementEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _PeripheralMeasurementEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PeripheralMeasurementEventService",
	HandlerType: (*PeripheralMeasurementEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _PeripheralMeasurementEventService_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilterEvents",
			Handler:       _PeripheralMeasurementEventService_FilterEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

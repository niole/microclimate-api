// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeripheralManagementServiceClient is the client API for PeripheralManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeripheralManagementServiceClient interface {
	CreatePeripheral(ctx context.Context, in *NewPeripheral, opts ...grpc.CallOption) (*Peripheral, error)
	RemovePeripheral(ctx context.Context, in *Peripheral, opts ...grpc.CallOption) (*Empty, error)
	GetDeploymentPeripherals(ctx context.Context, in *GetDeploymentPeripheralsRequest, opts ...grpc.CallOption) (PeripheralManagementService_GetDeploymentPeripheralsClient, error)
}

type peripheralManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeripheralManagementServiceClient(cc grpc.ClientConnInterface) PeripheralManagementServiceClient {
	return &peripheralManagementServiceClient{cc}
}

func (c *peripheralManagementServiceClient) CreatePeripheral(ctx context.Context, in *NewPeripheral, opts ...grpc.CallOption) (*Peripheral, error) {
	out := new(Peripheral)
	err := c.cc.Invoke(ctx, "/api.PeripheralManagementService/CreatePeripheral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peripheralManagementServiceClient) RemovePeripheral(ctx context.Context, in *Peripheral, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.PeripheralManagementService/RemovePeripheral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peripheralManagementServiceClient) GetDeploymentPeripherals(ctx context.Context, in *GetDeploymentPeripheralsRequest, opts ...grpc.CallOption) (PeripheralManagementService_GetDeploymentPeripheralsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeripheralManagementService_serviceDesc.Streams[0], "/api.PeripheralManagementService/GetDeploymentPeripherals", opts...)
	if err != nil {
		return nil, err
	}
	x := &peripheralManagementServiceGetDeploymentPeripheralsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeripheralManagementService_GetDeploymentPeripheralsClient interface {
	Recv() (*Peripheral, error)
	grpc.ClientStream
}

type peripheralManagementServiceGetDeploymentPeripheralsClient struct {
	grpc.ClientStream
}

func (x *peripheralManagementServiceGetDeploymentPeripheralsClient) Recv() (*Peripheral, error) {
	m := new(Peripheral)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeripheralManagementServiceServer is the server API for PeripheralManagementService service.
// All implementations must embed UnimplementedPeripheralManagementServiceServer
// for forward compatibility
type PeripheralManagementServiceServer interface {
	CreatePeripheral(context.Context, *NewPeripheral) (*Peripheral, error)
	RemovePeripheral(context.Context, *Peripheral) (*Empty, error)
	GetDeploymentPeripherals(*GetDeploymentPeripheralsRequest, PeripheralManagementService_GetDeploymentPeripheralsServer) error
	mustEmbedUnimplementedPeripheralManagementServiceServer()
}

// UnimplementedPeripheralManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeripheralManagementServiceServer struct {
}

func (UnimplementedPeripheralManagementServiceServer) CreatePeripheral(context.Context, *NewPeripheral) (*Peripheral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeripheral not implemented")
}
func (UnimplementedPeripheralManagementServiceServer) RemovePeripheral(context.Context, *Peripheral) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeripheral not implemented")
}
func (UnimplementedPeripheralManagementServiceServer) GetDeploymentPeripherals(*GetDeploymentPeripheralsRequest, PeripheralManagementService_GetDeploymentPeripheralsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentPeripherals not implemented")
}
func (UnimplementedPeripheralManagementServiceServer) mustEmbedUnimplementedPeripheralManagementServiceServer() {
}

// UnsafePeripheralManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeripheralManagementServiceServer will
// result in compilation errors.
type UnsafePeripheralManagementServiceServer interface {
	mustEmbedUnimplementedPeripheralManagementServiceServer()
}

func RegisterPeripheralManagementServiceServer(s *grpc.Server, srv PeripheralManagementServiceServer) {
	s.RegisterService(&_PeripheralManagementService_serviceDesc, srv)
}

func _PeripheralManagementService_CreatePeripheral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPeripheral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeripheralManagementServiceServer).CreatePeripheral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PeripheralManagementService/CreatePeripheral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeripheralManagementServiceServer).CreatePeripheral(ctx, req.(*NewPeripheral))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeripheralManagementService_RemovePeripheral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peripheral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeripheralManagementServiceServer).RemovePeripheral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PeripheralManagementService/RemovePeripheral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeripheralManagementServiceServer).RemovePeripheral(ctx, req.(*Peripheral))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeripheralManagementService_GetDeploymentPeripherals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeploymentPeripheralsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeripheralManagementServiceServer).GetDeploymentPeripherals(m, &peripheralManagementServiceGetDeploymentPeripheralsServer{stream})
}

type PeripheralManagementService_GetDeploymentPeripheralsServer interface {
	Send(*Peripheral) error
	grpc.ServerStream
}

type peripheralManagementServiceGetDeploymentPeripheralsServer struct {
	grpc.ServerStream
}

func (x *peripheralManagementServiceGetDeploymentPeripheralsServer) Send(m *Peripheral) error {
	return x.ServerStream.SendMsg(m)
}

var _PeripheralManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PeripheralManagementService",
	HandlerType: (*PeripheralManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePeripheral",
			Handler:    _PeripheralManagementService_CreatePeripheral_Handler,
		},
		{
			MethodName: "RemovePeripheral",
			Handler:    _PeripheralManagementService_RemovePeripheral_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentPeripherals",
			Handler:       _PeripheralManagementService_GetDeploymentPeripherals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peripheral.proto",
}

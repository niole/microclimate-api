// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeploymentManagementServiceClient is the client API for DeploymentManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentManagementServiceClient interface {
	GetDeploymentsForUser(ctx context.Context, in *GetDeploymentsForUserRequest, opts ...grpc.CallOption) (DeploymentManagementService_GetDeploymentsForUserClient, error)
	CreateDeployment(ctx context.Context, in *NewDeployment, opts ...grpc.CallOption) (*Deployment, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type deploymentManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentManagementServiceClient(cc grpc.ClientConnInterface) DeploymentManagementServiceClient {
	return &deploymentManagementServiceClient{cc}
}

func (c *deploymentManagementServiceClient) GetDeploymentsForUser(ctx context.Context, in *GetDeploymentsForUserRequest, opts ...grpc.CallOption) (DeploymentManagementService_GetDeploymentsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeploymentManagementService_serviceDesc.Streams[0], "/api.DeploymentManagementService/GetDeploymentsForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentManagementServiceGetDeploymentsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeploymentManagementService_GetDeploymentsForUserClient interface {
	Recv() (*Deployment, error)
	grpc.ClientStream
}

type deploymentManagementServiceGetDeploymentsForUserClient struct {
	grpc.ClientStream
}

func (x *deploymentManagementServiceGetDeploymentsForUserClient) Recv() (*Deployment, error) {
	m := new(Deployment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentManagementServiceClient) CreateDeployment(ctx context.Context, in *NewDeployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/api.DeploymentManagementService/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagementServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/api.DeploymentManagementService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagementServiceClient) RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.DeploymentManagementService/RemoveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentManagementServiceServer is the server API for DeploymentManagementService service.
// All implementations must embed UnimplementedDeploymentManagementServiceServer
// for forward compatibility
type DeploymentManagementServiceServer interface {
	GetDeploymentsForUser(*GetDeploymentsForUserRequest, DeploymentManagementService_GetDeploymentsForUserServer) error
	CreateDeployment(context.Context, *NewDeployment) (*Deployment, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*Empty, error)
	mustEmbedUnimplementedDeploymentManagementServiceServer()
}

// UnimplementedDeploymentManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentManagementServiceServer struct {
}

func (UnimplementedDeploymentManagementServiceServer) GetDeploymentsForUser(*GetDeploymentsForUserRequest, DeploymentManagementService_GetDeploymentsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentsForUser not implemented")
}
func (UnimplementedDeploymentManagementServiceServer) CreateDeployment(context.Context, *NewDeployment) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDeploymentManagementServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentManagementServiceServer) RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeployment not implemented")
}
func (UnimplementedDeploymentManagementServiceServer) mustEmbedUnimplementedDeploymentManagementServiceServer() {
}

// UnsafeDeploymentManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentManagementServiceServer will
// result in compilation errors.
type UnsafeDeploymentManagementServiceServer interface {
	mustEmbedUnimplementedDeploymentManagementServiceServer()
}

func RegisterDeploymentManagementServiceServer(s *grpc.Server, srv DeploymentManagementServiceServer) {
	s.RegisterService(&_DeploymentManagementService_serviceDesc, srv)
}

func _DeploymentManagementService_GetDeploymentsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeploymentsForUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentManagementServiceServer).GetDeploymentsForUser(m, &deploymentManagementServiceGetDeploymentsForUserServer{stream})
}

type DeploymentManagementService_GetDeploymentsForUserServer interface {
	Send(*Deployment) error
	grpc.ServerStream
}

type deploymentManagementServiceGetDeploymentsForUserServer struct {
	grpc.ServerStream
}

func (x *deploymentManagementServiceGetDeploymentsForUserServer) Send(m *Deployment) error {
	return x.ServerStream.SendMsg(m)
}

func _DeploymentManagementService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagementServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeploymentManagementService/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagementServiceServer).CreateDeployment(ctx, req.(*NewDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManagementService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagementServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeploymentManagementService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagementServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManagementService_RemoveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagementServiceServer).RemoveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeploymentManagementService/RemoveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagementServiceServer).RemoveDeployment(ctx, req.(*RemoveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeploymentManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DeploymentManagementService",
	HandlerType: (*DeploymentManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _DeploymentManagementService_CreateDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentManagementService_GetDeployment_Handler,
		},
		{
			MethodName: "RemoveDeployment",
			Handler:    _DeploymentManagementService_RemoveDeployment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeploymentsForUser",
			Handler:       _DeploymentManagementService_GetDeploymentsForUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deployment.proto",
}
